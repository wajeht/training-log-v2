<!-- spinner -->
<%- include('../partials/spinner.ejs') %>

<!-- video details -->
<!-- min-vh-100 bug for hiding footer when reloading -->
<section id="single-video-page" class="px-4 py-5 min-vh-100">
  <div class="container">
    <div class="row gy-3 position-relative">



      <!-- main video -->
      <div id="update-video" class="<%= recentVideos.length == 0 ? 'col-12' : 'col-lg-9 col-sm-12' %>">
        <div id="video-card<%= videoDetails.id %>" class="card shadow-sm mb-3">
          <!-- video player -->
          <video
            controls
            preload="none"
            poster="<%= videoDetails.screenshot_url %>"
          >
            <source src="<%= videoDetails.video_url %>" type="video/mp4" />
          </video>

          <div v-if="!isUpdate" class="card-body">
            <h5 class="card-title">{{ title }}</h5>
            <p class="card-text">{{ description }}</p>
          </div>

          <!-- update form -->
          <div v-if="isUpdate" class="card-body">
            <form>
              <!-- video file upload  -->
              <input
                type="file"
                class="form-control mb-2"
                id="floatingInput"
                name="video"
                @change="handleFileChange($event)"
                accept="video/*"
              />

              <!-- title -->
              <input
                name="title"
                type="text"
                class="form-control mb-2"
                v-model="title"
              />

              <!-- description -->
              <textarea
                v-model="description"
                class="form-control mb-2"
                name="description"
                style="height: 150px"
              ></textarea>

              <!-- cancel button -->
              <button
                @click="toggleUpdate()"
                type="button"
                class="btn btn-danger me-1"
              >
                Cancel
              </button>

              <!-- update button -->
              <button @click="update()" type="button" class="btn btn-dark">
                Update
              </button>
            </form>
          </div>

          <!-- card footer -->
          <div
            v-if="!isUpdate"
            class="
              card-footer
              text-muted
              d-flex
              gap-2
              justify-content-between
              align-items-center
            "
          >
            <!-- post author details -->
            <div class="d-flex gap-3 justify-content-center align-items-center">
              <a
                href="/users/<%= videoDetails.username  %> "
                class="
                  d-inline-block
                  link-secondary
                  text-decoration-none
                  align-text-top
                "
              >
                <img
                  src="<%= videoDetails.profile_picture_url %> "
                  alt="mdo"
                  width="25"
                  height="25"
                  class="rounded-circle"
                />
                <%= videoDetails.username %>
              </a>
              <a href="#" class="link-secondary text-decoration-none"
                ><i class="bi bi-calendar-minus"></i> <%=
                videoDetails.date.toLocaleDateString() %></a
              >
              <% if ( isAuthenticated && (user.id == videoDetails.user_id)) { %>
              <a
                href="/download/<%= videoDetails.id %>"
                class="link-secondary text-decoration-none"
                ><i class="bi bi-cloud-download"></i> Download</a
              >
              <% } %>
            </div>

            <!-- edit and delete -->
            <% if ( isAuthenticated && (user.id == videoDetails.user_id)) { %>
            <div class="d-flex gap-3 justify-content-center align-items-center">
              <input
                type="hidden"
                name="userId"
                id="userId"
                value="<%= videoDetails.user_id %>"
              />
              <input
                type="hidden"
                id="csrfToken"
                name="_csrf"
                value="<%= csrfToken %>"
              />
              <a
                @click="toggleUpdate()"
                href="#"
                class="link-secondary text-decoration-none"
                ><i class="bi bi-pencil"></i
              ></a>
              <a
                href="#"
                data-bs-toggle="modal"
                data-bs-target="#deleteConfirmation"
                id="delete-button"
                class="link-secondary text-decoration-none"
                ><i class="bi bi-trash"></i
              ></a>
            </div>
            <% } %>
          </div>
        </div>

        <!-- user's comment -->
        <%- include('../partials/auth/videos-comments.ejs') %>

        <!-- sign in to comment -->
        <%- include('../partials/auth/post-a-comment.ejs') %>
      </div>

      <!-- recent video collection -->
      <%- include('../partials/recent-videos.ejs') %>
    </div>
  </div>
</section>


<!-- -------------------- vue scripts -------------------- -->
<script>
  Vue.createApp({
    data() {
      return {
        isUpdate: false,
        video: null,
        title: "<%= videoDetails.title %>",
        description: "<%= videoDetails.description %>",
        date: null,
        videoId: "<%= videoDetails.id %>",
        user_id: "<%= videoDetails.user_id %>",
        video_url: "<%= videoDetails.video_url %>",
        csrf: "<%= csrfToken %>",
        videoHeight: '',
      };
    },
    async mounted() {
      const height = await this.getVideoDimensionsOf(this.video_url);
      this.videoHeight = await height.height;

      console.log(this.videoHeight)
    },
    methods: {
      /**
       * https://stackoverflow.com/questions/4129102/html5-video-dimensions
       * Returns the dimensions of a video asynchronously.
       * @param {String} url Url of the video to get dimensions from.
       * @return {Promise} Promise which returns the dimensions of the video in 'width' and 'height' properties.
      **/
      getVideoDimensionsOf(url){
          return new Promise(resolve => {
              // create the video element
              const video = document.createElement('video');

              // place a listener on it
              video.addEventListener( "loadedmetadata", function () {
                  // retrieve dimensions
                  const height = this.videoHeight;
                  const width = this.videoWidth;
                  // send back result
                  resolve({height, width});
              }, false );

              // start download meta-datas
              video.src = url;
          });
      },
      // if use click cancel, revert back og state
      toggleUpdate() {
        this.isUpdate = !this.isUpdate;
        this.title =  "<%= videoDetails.title %>";
        this.description = "<%= videoDetails.description %>";

        const video = document.querySelector("#update-video").children[0].children[0];
        let reader = new FileReader();

        if (this.video != null) {
          video.src = this.video_url;
        } else {
          this.video = null;
        }

      },
      handleFileChange(event) {
        this.video = event.target.files[0];

        // let video = document.getElementById("video-preview");
        const video = document.querySelector("#update-video").children[0].children[0];
        let reader = new FileReader();

        reader.readAsDataURL(this.video);
        reader.addEventListener("load", function () {
          video.src = reader.result;
          video.removeAttribute('preload')
          video.removeAttribute('poster')
        });
      },
      async update() {
        this.date = new Date().toLocaleDateString();
        const formData = new FormData();

        formData.append("video", this.video);
        formData.append("title", this.title);
        formData.append("description", this.description);
        formData.append("user_id", this.user_id);
        formData.append("date", new Date().toLocaleDateString());
        formData.append("video_id", this.videoId);

        try {
          const res = await fetch(`/videos/${this.videoId}`, {
            method: "PUT",
            headers: {
              "csrf-token": this.csrf,
            },
            body: formData,
          });

          const data = await res.json();

          if (!res.ok) {
            throw {
              statusCode: res.status,
              ...data,
            };
          }

          this.isUpdate = !this.isUpdate;
        } catch (err) {
          console.warn(err);
        }
      },
    },
  }).mount("#update-video");
</script>
